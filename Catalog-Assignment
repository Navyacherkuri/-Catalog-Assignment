const input = {
    "keys": {
        "n": 9,
        "k": 6
    },
    "1": {
        "base": "10",
        "value": "28735619723837"
    },
    "2": {
        "base": "16",
        "value": "1A228867F0CA"
    },
    "3": {
        "base": "12",
        "value": "32811A4AA0B7B"
    },
    "4": {
        "base": "11",
        "value": "917978721331A"
    },
    "5": {
        "base": "16",
        "value": "1A22886782E1"
    },
    "6": {
        "base": "10",
        "value": "28735619654702"
    },
    "7": {
        "base": "14",
        "value": "71AB5070CC4B"
    },
    "8": {
        "base": "9",
        "value": "122662581541670"
    },
    "9": {
        "base": "8",
        "value": "642121030037605"
    }
};

// Function to decode values from different bases to base 10
function decodeValue(base, value) {
    return parseInt(value, base);
}

// Function to perform Lagrange Interpolation and find the constant term
function lagrangeInterpolation(points) {
    let c = 0;
    const n = points.length;

    for (let i = 0; i < n; i++) {
        let li = 1;
        let denom = 1;

        for (let j = 0; j < n; j++) {
            if (i !== j) {
                li *= -points[j].x;
                denom *= (points[i].x - points[j].x);
            }
        }

        c += points[i].y * (li / denom);
    }

    return c;
}

function main() {
    const points = [];

    // Extract and decode the points (x, y)
    for (let key in input) {
        if (key === "keys") continue;
        const x = parseInt(key); // Use the key as x
        const base = parseInt(input[key].base);
        const y = decodeValue(base, input[key].value); // Decode the y value from its base
        points.push({ x, y });
    }

    // Find the constant term 'c' using Lagrange interpolation
    const constantTerm = lagrangeInterpolation(points);
    console.log("The constant term 'c' is:", constantTerm);
}

main();
